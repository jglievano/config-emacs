#+TITLE: My Emacs Configuration

* General

** Functions

#+begin_src emacs-lisp
  (defun woof-install-if-needed (pkg)
    "Installs PKG if not installed yet."
    (unless (package-installed-p pkg)
      (package-install pkg)))

  (defun woof-add-exec-path (path)
    "Adds PATH to environment's PATH."
    (setenv "PATH" (concat (getenv "PATH") ":" path))
    (setq exec-path (append exec-path (list path))))
#+end_src

** Initialization steps

*** Package archives

#+begin_src emacs-lisp
  (require 'package)
  (setq package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
			   ("marmalade" . "https://jorgenschaefer.github.io/packages/")
			   ("melpa" . "https://melpa.org/packages/")
			   ("melpa-stable" . "https://stable.melpa.org/packages/")
			   ("org" . "https://orgmode.org/elpa/")))
  (package-initialize)
#+end_src

*** Better settings

#+begin_src emacs-lisp
  (setq ad-redefinition-action 'accept
	auto-save-default nil
	create-lockfiles nil)
#+end_src

*** Emacs local dir

#+begin_src emacs-lisp
  (let ((local-dir (expand-file-name ".local/" user-emacs-directory)))
    (setq abbrev-file-name (concat local-dir "abbrev.el")
	  auto-save-list-file-name (concat local-dir "autosave")
	  backup-directory-alist (list (cons "." (concat local-dir "backup/")))
	  pcache-directory (concat local-dir "pcache/")
	  server-auth-dir (concat local-dir "server/")))
#+end_src

** UI essentials

#+begin_src emacs-lisp
  ;; Needed to allow full-height screen.
  (setq frame-resize-pixelwise t)

  (column-number-mode)

  (if (fboundp 'fringe-mode) (fringe-mode -1))
  (if (fboundp 'tooltip-mode) (tooltip-mode -1))
  (if (fboundp 'menu-bar-mode) (menu-bar-mode -1))
  (if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
  (if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))

  (setq inhibit-splash-screen t
	inhibit-startup-message t
	inhibit-startup-echo-area-message t)

  (setq visible-bell 1
	ring-bell-function 'ignore)
#+end_src

*** Fonts

#+begin_src emacs-lisp
  (when (window-system)
    (set-frame-font "JetBrains Mono-13"))

  (if (and (eq system-type 'darwin) (version< "27.0" emacs-version))
      (set-fontset-font
       "fontset-default" 'unicode "Apple Color Emoji" nil 'prepend)
    (set-fontset-font
     t 'symbol (font-spec :family "Apple Color Emoji") nil 'prepend))
#+end_src

*** Theme

#+begin_src emacs-lisp
  (load-theme 'papercolor t)
#+end_src

** Magit

#+begin_src emacs-lisp
  (woof-install-if-needed 'magit)
  (require 'magit)
#+end_src

** Projectile

#+begin_src emacs-lisp
  (woof-install-if-needed 'projectile)

  (projectile-mode +1)
  (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
  (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
#+end_src

** Rainbow delimiters

#+begin_src emacs-lisp
  (woof-install-if-needed 'rainbow-delimiters)
  (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
#+end_src

** Rainbow mode

#+begin_src emacs-lisp
  (woof-install-if-needed 'rainbow-mode)
  (add-hook 'prog-mode-hook #'rainbow-mode)
#+end_src

** Smex

#+begin_src emacs-lisp
  (woof-install-if-needed 'smex)

  (require 'smex)
  (smex-initialize)
  (global-set-key (kbd "M-x") 'smex)
  (global-set-key (kbd "M-X") 'smex-major-mode-commands)
#+end_src

** Which-key

#+begin_src emacs-lisp
  (woof-install-if-needed 'which-key)

  (require 'which-key)
  (setq which-key-add-column-padding 1
	which-key-idle-delay 0.5
	which-key-max-displays-columns nil
	which-key-min-displays-lines 5
	which-key-sort-order #'which-key-prefix-then-key-order
	which-key-sort-uppercase-first nil)
  (which-key-mode)
  (set-face-attribute 'which-key-local-map-description-face nil :weight 'bold)
  (which-key-setup-side-window-bottom)
#+end_src

* Development

** Utils

#+begin_src emacs-lisp
  (mapc 'woof-install-if-needed
	'(flycheck
	  company
	  lsp-mode
	  lsp-ui
	  company-lsp))

  (require 'lsp-mode)
  (require 'lsp-ui)
  (require 'company-lsp)

  (defun woof-disable-flycheck-in-org-src-block ()
    (setq-local flycheck-disabled-checkers '(emacs-lisp-checkdoc)))

  (add-hook 'prog-mode-hook #'flycheck-mode)
  (add-hook 'org-src-mode-hook 'woof-disable-flycheck-in-org-src-block)
  (add-hook 'prog-mode-hook #'company-mode)

  (setq company-tooltip-align-annotations t
	company-minimum-prefix-length 1)

  (push 'company-lsp company-backends)
#+end_src

** Rust

#+begin_src emacs-lisp
  (defvar cargo-path (expand-file-name ".cargo/bin" "~/"))
  (woof-add-exec-path cargo-path)

  (mapc 'woof-install-if-needed
	'(toml-mode
	  rust-mode
	  cargo
	  flycheck-rust))

  (add-hook 'rust-mode-hook #'lsp-deferred)
  (add-hook 'rust-mode-hook #'cargo-minor-mode)
  (add-hook 'flycheck-mode-hook #'flycheck-rust-setup)
#+end_src
