#+TITLE: My Emacs Configuration
#+AUTHOR: Gabriel Lievano
#+DATE: 2020-02-18 sam.

* Functions

#+begin_src emacs-lisp
  (defun jgl/what-face (pos)
    "Get font face under POS."
    (interactive "d")
    (let ((face (or (get-char-property (point) 'read-face-name)
		    (get-char-property (point) 'face))))
      (if face (message "Face: %s" face) (message "No face at %d" pos))))

  (defun jgl/install-if-needed (pkg)
    "Installs PKG if not installed yet."
    (unless (package-installed-p pkg)
      (package-install pkg)))

  (defun jgl/add-exec-path (path)
    "Adds PATH to environment's PATH."
    (setenv "PATH" (concat (getenv "PATH") ":" path))
    (setq exec-path (append exec-path (list path))))
#+end_src

* Initialization

*** Package archives

#+begin_src emacs-lisp
  (cond
   ((>= 24 emacs-major-version)
    (require 'package)
    (package-initialize)
    (package-refresh-contents)))

  (setq package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
			   ("marmalade" . "https://jorgenschaefer.github.io/packages/")
			   ("melpa" . "https://melpa.org/packages/")
			   ("melpa-stable" . "https://stable.melpa.org/packages/")
			   ("org" . "https://orgmode.org/elpa/")))
#+end_src

*** use-package

#+begin_src emacs-lisp
  (eval-when-compile
    (require 'diminish)
    (require 'use-package)
    (setq use-package-always-ensure t))
#+end_src

*** Better settings

#+begin_src emacs-lisp
  (setq
   ad-redefinition-action 'accept
   auto-save-default nil
   create-lockfiles nil
   )

  (defalias 'yes-or-no-p 'y-or-n-p)
#+end_src

*** Emacs local dir

#+begin_src emacs-lisp
  (let ((local-dir (expand-file-name ".local/" user-emacs-directory)))
    (setq abbrev-file-name (concat local-dir "abbrev.el")
	  auto-save-list-file-name (concat local-dir "autosave")
	  backup-directory-alist (list (cons "." (concat local-dir "backup/")))
	  pcache-directory (concat local-dir "pcache/")
	  server-auth-dir (concat local-dir "server/")))
#+end_src

*** Exec path

#+begin_src emacs-lisp
  (if (memq window-system '(mac ns))
      (progn
	(jgl/install-if-needed 'exec-path-from-shell)
	(setq exec-path-from-shell-check-startup-files nil)
	(exec-path-from-shell-initialize))
    nil)

  (setenv "PATH"
	  (concat (getenv "PATH")
		  (expand-file-name "~/.config/nvm/versions/node/v13.8.0/bin")))
  (setq exec-path
	(append exec-path
		'((expand-file-name "~/.config/nvm/versions/node/v13.8.0/bin"))))
#+end_src

* General

** UI essentials

#+begin_src emacs-lisp
  (jgl/install-if-needed 'all-the-icons)
  (require 'all-the-icons)

  ;; Needed to allow full-height screen.
  (setq frame-resize-pixelwise t)

  (column-number-mode)

  (if (fboundp 'fringe-mode) (fringe-mode -1))
  (if (fboundp 'tooltip-mode) (tooltip-mode -1))
  (if (fboundp 'menu-bar-mode) (menu-bar-mode -1))
  (if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
  (if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))

  (setq inhibit-splash-screen t
	inhibit-startup-message t
	inhibit-startup-echo-area-message t)

  (setq visible-bell 1
	ring-bell-function 'ignore)
#+end_src

*** Fonts

#+begin_src emacs-lisp
  (when (window-system)
    (set-frame-font "JetBrains Mono-13"))

  (if (and (eq system-type 'darwin) (version< "27.0" emacs-version))
      (set-fontset-font
       "fontset-default" 'unicode "Apple Color Emoji" nil 'prepend)
    (set-fontset-font
     t 'symbol (font-spec :family "Apple Color Emoji") nil 'prepend))
#+end_src

*** Theme

#+begin_src emacs-lisp
  (use-package moe-theme
    :config
    (moe-dark))
  ;(load-theme 'flatland t)
  ;(load-theme 'papercolor t)
#+end_src

** Eshell

#+begin_src emacs-lisp
  (if (featurep 'cl-lib)
      (require 'cl-lib)
    (require 'cl))

  (defun jgl/shortened-path (path max-len)
    "Return a modified version of PATH, replacing some components
  with single characters starting from the left to try and get the
  path down to MAX-LEN."
    (let* ((components (split-string (abbreviate-file-name path) "/"))
	   (len (+ (1- (length components))
		   (cl-reduce '+ components :key 'length)))
	   (str ""))
      (while (and (> len max-len)
		  (cdr components))
	(stq str (concat str (if (= 0 (length (car components)))
				 "/"
			       (string (elt (car components) 0) ?/)))
	     len (- len (1- (length (car components))))
	     components (cdr components)))
      (concat str (cl-reduce (lambda (a b) (concat a "/" b)) components))))

  (defun jgl/with-face (str &rest face-plist)
    "Propertize FACE-PLIST to STR."
    (propertize str 'face face-plist))

  (defun jgl/vc-prompt-info ()
    "String printed in eshell prompt for version control."
    (if (ignore-errors (vc-responsible-backend default-directory))
	(format "%s %s\n"
		(all-the-icons-octicon "git-branch" :height 0.8 :v-adjust 0.1)
		(jgl/with-face (magit-get-current-branch) `(:foreground "#b8bb26")))
      ""))

  (setq eshell-prompt-function
	(lambda ()
	  (format "\n%s[%s@%s %s]%s "
		  (jgl/vc-prompt-info)
		  (jgl/with-face user-login-name `(:foreground "#fabd2f"))
		  (jgl/with-face system-name `(:foreground "#cc241d"))
		  (jgl/with-face (jgl/shortened-path (eshell/pwd) 40) `(:foreground "#83a598"))
		  (if (= (user-uid) 0) "#" "$"))))

  (setq eshell-hist-ignoredups t
	eshell-highlight-prompt nil
	eshell-cmpl-cycle-completions nil
	eshell-cmpl-ignore-case t
	eshell-ask-to-save-history 'always
	eshell-prompt-regexp "^[^#$\n]*[#$] ")
#+end_src

** Swiper (and Ivy, Counsel)

#+begin_src emacs-lisp
  (use-package counsel
    :config
    (global-set-key (kbd "M-x") 'counsel-M-x)
    (global-set-key (kbd "C-x C-f") 'counsel-find-file)
    (global-set-key (kbd "<f1> f") 'counsel-describe-function)
    (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
    (global-set-key (kbd "<f1> l") 'counsel-find-library)
    (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
    (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
    (global-set-key (kbd "C-c g") 'counsel-git)
    (global-set-key (kbd "C-c j") 'counsel-git-grep)
    (global-set-key (kbd "C-c k") 'counsel-ag)
    (global-set-key (kbd "C-x l") 'counsel-locate)
    (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
    (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history))

  (use-package ivy
    :diminish
    :config
    (ivy-mode 1)
    (setq
     ivy-use-virtual-buffers t
     enable-recursive-minibuffers t
     )
    (global-set-key (kbd "C-c C-r") 'ivy-resume)
    (global-set-key (kbd "<f6>") 'ivy-resume))

  (use-package swiper
    :bind (("C-s" . swiper)))
#+end_src

** Magit

#+begin_src emacs-lisp
  (jgl/install-if-needed 'magit)
  (require 'magit)
#+end_src

** Projectile

#+begin_src emacs-lisp
  (use-package projectile
    :diminish
    :config
    (projectile-mode +1)
    (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map))
  
  (jgl/install-if-needed 'counsel-projectile)
  (counsel-projectile-mode)
#+end_src

** Rainbow delimiters

#+begin_src emacs-lisp
  (jgl/install-if-needed 'rainbow-delimiters)
  (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
#+end_src

** Rainbow mode

#+begin_src emacs-lisp
  (use-package rainbow-mode
    :diminish
    :hook prog-mode)
#+end_src

** Smex

#+begin_src emacs-lisp
  (jgl/install-if-needed 'smex)

  (require 'smex)
  (smex-initialize)
  (global-set-key (kbd "M-x") 'smex)
  (global-set-key (kbd "M-X") 'smex-major-mode-commands)
#+end_src

** Which-key

#+begin_src emacs-lisp
  (jgl/install-if-needed 'which-key)

  (require 'which-key)
  (setq which-key-add-column-padding 1
	which-key-idle-delay 0.5
	which-key-max-displays-columns nil
	which-key-min-displays-lines 5
	which-key-sort-order #'which-key-prefix-then-key-order
	which-key-sort-uppercase-first nil)
  (which-key-mode)
  (set-face-attribute 'which-key-local-map-description-face nil :weight 'bold)
  (which-key-setup-side-window-bottom)
#+end_src

* Development

** LSP

#+begin_src emacs-lisp
  (use-package company
    :diminish
    :pin melpa-stable
    :config
    (setq
     company-dabbrev-ignore-case nil
     company-dabbrev-downcase nil
     company-idle-delay 1.0
     company-minimum-prefix-length 2
     company-show-numbers t
     company-tooltip-align-annotations t
     ))

  (use-package company-lsp :commands company-lsp)

  (use-package flycheck
    :commands flycheck
    :preface
    (defun jgl/disable-flycheck-in-org-src-block ()
      (setq-local flycheck-disabled-checkers '(emacs-lisp-checkdoc)))
    :config
    (global-flycheck-mode)
    (add-hook 'org-src-mode-hook 'jgl/disable-flycheck-in-org-src-block)
    (setq flycheck-display-errors-delay .3))

  (use-package lsp-mode
    :init (setq lsp-keymap-prefix "C-l")
    :hook ((c-mode . lsp-deferred)
	   (c++-mode . (lambda () (require 'ccls) (lsp-deferred)))
	   (rust-mode . lsp-deferred)
	   (lsp-mode . lsp-enable-which-key-integration))
    :commands (lsp lsp-deferred))

  (use-package lsp-ivy :commands lsp-ui-mode)
  (use-package lsp-treemacs :commands lsp-treemacs-errors-list)
  (use-package lsp-ui :commands lsp-ui-mode)

  (use-package dap-mode
    :after lsp-mode
    :config
    (dap-mode t)
    (dap-ui-mode t))
#+end_src

** Bash

#+begin_src emacs-lisp
  (add-hook 'shell-mode-hook #'lsp-deferred)
#+end_src

** Bazel

#+begin_src emacs-lisp
  (jgl/install-if-needed 'bazel-mode)

  (add-to-list 'auto-mode-alist '("\\.bzl\\'" . bazel-mode))
  (add-to-list 'auto-mode-alist '("BUILD(\\.bazel)?$" . bazel-mode))
  (add-to-list 'auto-mode-alist '("WORKSPACE$" . bazel-mode))
#+end_src

** C++

#+begin_src emacs-lisp
  (use-package cc-mode
    :disabled
    :config
    (setq
     c-basic-offset 2
     c-default-style "linux"
     ))

  (use-package ccls
    :after projectile
    :config
    (setq
     ccls-args nil
     ccls-executable (executable-find "ccls")
     projectile-project-root-files-top-down-recurring (append '("compile_commands.json" ".ccls")
							      projectile-project-root-files-top-down-recurring)
     )
    (add-to-list 'projectile-globally-ignored-directories ".ccls-cache"))

  (use-package google-c-style
    :hook (((c-mode c++-mode) . google-set-c-style)
	   (c-mode-common . google-make-newline-indent)))
#+end_src

Remember to provide a ~compile_commands.json~ at the root of a C++ project.

When using ~cmake~:

#+begin_src bash
cmake -H. -BDebug -DCMAKE_BUILD_TYPE=Debug -DCMAKE_EXPORT_COMPILE_COMMANDS=YES
ln -s Debug/compile_commands.json
#+end_src

When using ~bear~:

#+begin_src bash
bear make
#+end_src

When using ~ninja~:

#+begin_src bash
ninja -C out/Release -t compdb cxx cc > compile_commands.json
#+end_src

When using ~xcodebuild~, make sure to install ~xcpretty~ first:

#+begin_src bash
xcodebuild | xcpretty -r json-compilation-database --output compile_commands.json
#+end_src

When in doubt, take a look at [[https://github.com/MaskRay/ccls/wiki/Project-Setup]].

** CMake

#+begin_src emacs-lisp
  (use-package cmake-mode
    :mode ("CMakeLists\\.txt\\'"
	   "\\.cmake\\'"))

  (use-package cmake-font-lock
    :after (cmake-mode)
    :hook (cmake-mode . cmake-font-lock-activate))

  (use-package cmake-ide
    :after projectile
    :hook (c++-mode . jgl/cmake-ide-find-project)
    :preface
    (defun jgl/cmake-ide-find-project ()
      "Finds the directory of the project for cmake-ide."
      (with-eval-after-load 'projectile
	(setq
	 cmake-ide-project-dir (projectile-project-root)
	 cmake-ide-build-dir (concat cmake-ide-project-dir "build")))
      (setq
       cmake-ide-compile-command (concat "cd "
					 cmake-ide-build-dir
					 " && cmake .. && make")))
    (defun jgl/switch-to-compilation-window ()
      "Switches to the *compilation* buffer."
      (other-window 1))
    :bind ([remap comment-region] . cmake-ide-compile)
    :init (cmake-ide-setup)
    :config (advice-add 'cmake-ide-compile :after #'jgl/switch-to-compilation-window))
#+end_src

** JavaScript

Great setup from Doom Emacs:
[[https://github.com/hlissner/doom-emacs/blob/develop/modules/lang/javascript/config.el]]

I'll probably try to bring as much as I can from there.

#+begin_src emacs-lisp
  (use-package coffee-mode
    :config
    (custom-set-variables '(coffee-tab-width 2)))

  (use-package eslintd-fix
    :after js2-mode
    :config
    (add-hook 'js2-mode-hook 'eslintd-fix-mode))

  (use-package js2-mode
    :mode "\\.m?js\\'"
    :interpreter "node"
    :commands js2-line-break
    :config
    (setq
     js-chain-indent t
     js2-skip-preprocessor-directives t
     js2-mode-show-parse-errors nil
     js2-mode-show-strict-warnings nil
     js2-strict-trailing-comma-warning nil
     js2-strict-missing-semi-warning nil
     js2-highlight-level 3
     js2-highlight-external-variables t
     js2-idle-timer-delay 0.1
     )
    (add-hook 'js2-mode-hook #'rainbow-delimiters-mode))

  (use-package js2-refactor)

  (use-package nodejs-repl
    :after js2-mode
    :config
    (defun nvm-which ()
      (let* ((shell (concat (getenv "SHELL") " -l -c 'nvm which'"))
	     (output (shell-command-to-string shell)))
	(cadr (split-string output "[\n]+" t))))
    (setq nodejs-repl-command #'nvm-which)
    (add-hook 'js-mode-hook
	      (lambda ()
		(define-key js-mode-map (kbd "C-x C-e") 'nodejs-repl-send-last-expression)
		(define-key js-mode-map (kbd "C-c C-j") 'nodejs-repl-send-line)
		(define-key js-mode-map (kbd "C-c C-r") 'nodejs-repl-send-region)
		(define-key js-mode-map (kbd "C-c C-l") 'nodejs-repl-load-file)
		(define-key js-mode-map (kbd "C-c C-z") 'nodejs-repl-switch-to-repl))))

  (use-package npm-mode
    :hook ((js-mode typescript-mode) . npm-mode))

  (use-package rjsx-mode
    :mode "components/.+\\.js$"
    :init
    (defun jgl/javascript-jsx-file-p ()
      "Detect React or preact imports early in the file."
      (and buffer-file-name
	   (string= (file-name-extension buffer-file-name) "js")
	   (re-search-forward "\\(^\\s-*import +React\\|\\( from \\|require(\\)[\"']p?react\\)"
			      magic-mode-regexp-match-limit t)
	   (progn (goto-char (match-beginning 1))
		  (not (sp-point-in-string-or-comment)))))
    (add-to-list 'magic-mode-alist '(jgl/javascript-jsx-file-p . rjsx-mode)))

  (use-package skewer-mode)

  (use-package tide
    :config
    (add-hook 'js2-mode-hook #'setup-tide-mode)
    (flycheck-add-next-checker 'javascript-eslint 'javascript-tide 'append))

  (use-package typescript-mode :defer t)
  (use-package xref-js2 :defer t)
#+end_src

** Plantuml

#+begin_src emacs-lisp
  (jgl/install-if-needed 'plantuml-mode)

  (setq plantuml-jar-path (expand-file-name "~/.local/bin/plantuml.1.2020.0.jar")
	plantuml-default-exec-mode 'jar)

  (add-to-list 'auto-mode-alist '("\\.uml\\'" . plantuml-mode))
#+end_src

** Python

#+begin_src emacs-lisp
  (mapc 'jgl/install-if-needed
	'(lsp-python-ms
	  python-mode))

  (add-to-list 'auto-mode-alist '("\\.py\\'" . python-mode))
  (add-to-list 'auto-mode-alist '("BUCK$" . python-mode))

  (defun jgl/python-mode-lsp ()
    (require 'lsp-python-ms)
    (lsp-deferred))

  (add-hook 'python-mode-hook 'jgl/python-mode-lsp)
#+end_src

** Ruby

#+begin_src emacs-lisp
  (use-package ruby-mode
    :disabled
    :mode (("\\.rake$" . ruby-mode)
	   ("\\.gemspec$" . ruby-mode)
	   ("\\.ru$" . ruby-mode)
	   ("(Release)?Fastfile$" . ruby-mode)
	   ("(App|Cap|Gem|Guard|Match|Rake)file$" . ruby-mode)
	   ("Vagrantfile(.local)?$" . ruby-mode)))
#+end_src

** Rust

#+begin_src emacs-lisp
  (defvar cargo-path (expand-file-name ".cargo/bin" "~/"))
  (jgl/add-exec-path cargo-path)

  (mapc 'jgl/install-if-needed
	'(toml-mode
	  rust-mode
	  cargo
	  flycheck-rust))

  (add-hook 'rust-mode-hook #'cargo-minor-mode)
  (add-hook 'flycheck-mode-hook #'flycheck-rust-setup)
#+end_src

** Swift

#+begin_src emacs-lisp
  (jgl/install-if-needed 'swift-mode)
  (add-to-list 'auto-mode-alist '("\\.swift\\'" . swift-mode))
#+end_src

** Web

#+begin_src emacs-lisp
  (use-package css-mode
    :disabled
    :config
    (setq css-indent-offset 2))

  (use-package scss-mode
    :mode "\\.s[ac]ss\\'")

  (use-package web-mode
    :mode (("\\.phtml\\'" . web-mode)
	   ("\\.tpl\\.php\\'" . web-mode)
	   ("\\.[agj]sp\\'" . web-mode)
	   ("\\.as[cp]x\\'" . web-mode)
	   ("\\.erb\\'" . web-mode)
	   ("\\.mustache\\'" . web-mode)
	   ("\\.djhtml\\'" . web-mode)
	   ("\\.html?\\'" . web-mode)
	   ("\\.njk\\'" . web-mode)
	   ("\\.hbs\\'" . web-mode))
    :init
    (defun jgl/web-mode-indent ()
      (setq
       web-mode-markup-indent-offset 2
       web-mode-css-indent-offset 2
       web-mode-code-indent-offset 2
       ))
    :config
    (add-hook 'web-mode-hook 'jgl/web-mode-indent))
#+end_src

* Org-mode

** Plus contributions

#+begin_src emacs-lisp
  (use-package org
    :ensure org-plus-contrib
    :bind (("C-c d" . org-decrypt-entry))
    :config
    (setq
     org-todo-keywords '((sequence
			  "BACKLOG(b)" "STUDY(s)" "WIP(w)" "REVIEW(r)"
			  "|"
			  "DONE(x!)" "CANCELLED(c@)")
			 (sequence "note(n)"))
     org-tags-exclude-from-inheritance '("crypt")
     org-crypt-key "0249521EFC5A93D975179A21AF978A7E6599B8D1"
     ))
#+end_src

** Journal

#+begin_src emacs-lisp
  (use-package org-journal
    :load-path "site-lisp/org-journal"
    :bind (("C-c t" . org-journal-new-entry)
	   ("C-c y" . jgl/journal-load-file-yesterday))
    :preface
    (defun jgl/journal-file-yesterday ()
      "Gets filename of yesterday's journal entry."
      (let* ((yesterday (time-subtract (current-time) (days-to-time 1)))
	     (daily-name (format-time-string "%Y%m%d" yesterday)))
	(expand-file-name (concat org-journal-dir daily-name))))

    (defun jgl/journal-load-file-yesterday ()
      "Creates and loads a file based on yesterday's date."
      (interactive)
      (find-file (jgl/journal-file-yesterday)))
    :config
    (setq org-journal-enable-encryption nil))

#+end_src
