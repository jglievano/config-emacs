#+TITLE: My Emacs Configuration
#+AUTHOR: Gabriel Lievano
#+DATE: 2020-02-18 sam.

* Functions

#+begin_src emacs-lisp
  (defun wuff-what-face (pos)
    "Get font face under POS."
    (interactive "d")
    (let ((face (or (get-char-property (point) 'read-face-name)
		    (get-char-property (point) 'face))))
      (if face (message "Face: %s" face) (message "No face at %d" pos))))

  (defun wuff-install-if-needed (pkg)
    "Installs PKG if not installed yet."
    (unless (package-installed-p pkg)
      (package-install pkg)))

  (defun wuff-add-exec-path (path)
    "Adds PATH to environment's PATH."
    (setenv "PATH" (concat (getenv "PATH") ":" path))
    (setq exec-path (append exec-path (list path))))
#+end_src

* Initialization

*** Package archives

#+begin_src emacs-lisp
  (require 'package)
  (setq package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
			   ("marmalade" . "https://jorgenschaefer.github.io/packages/")
			   ("melpa" . "https://melpa.org/packages/")
			   ("melpa-stable" . "https://stable.melpa.org/packages/")
			   ("org" . "https://orgmode.org/elpa/")))
  (package-initialize)
#+end_src

*** Better settings

#+begin_src emacs-lisp
  (setq ad-redefinition-action 'accept
	auto-save-default nil
	create-lockfiles nil)
#+end_src

*** Emacs local dir

#+begin_src emacs-lisp
  (let ((local-dir (expand-file-name ".local/" user-emacs-directory)))
    (setq abbrev-file-name (concat local-dir "abbrev.el")
	  auto-save-list-file-name (concat local-dir "autosave")
	  backup-directory-alist (list (cons "." (concat local-dir "backup/")))
	  pcache-directory (concat local-dir "pcache/")
	  server-auth-dir (concat local-dir "server/")))
#+end_src

*** Exec path

#+begin_src emacs-lisp
  (if (memq window-system '(mac ns))
      (progn
	(wuff-install-if-needed 'exec-path-from-shell)
	(setq exec-path-from-shell-check-startup-files nil)
	(exec-path-from-shell-initialize))
    nil)

  (setenv "PATH"
	  (concat (getenv "PATH")
		  (expand-file-name "~/.config/nvm/versions/node/v13.8.0/bin")))
  (setq exec-path
	(append exec-path
		'((expand-file-name "~/.config/nvm/versions/node/v13.8.0/bin"))))
#+end_src

* General

** UI essentials

#+begin_src emacs-lisp
  (wuff-install-if-needed 'all-the-icons)

  ;; Needed to allow full-height screen.
  (setq frame-resize-pixelwise t)

  (column-number-mode)

  (if (fboundp 'fringe-mode) (fringe-mode -1))
  (if (fboundp 'tooltip-mode) (tooltip-mode -1))
  (if (fboundp 'menu-bar-mode) (menu-bar-mode -1))
  (if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
  (if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))

  (setq inhibit-splash-screen t
	inhibit-startup-message t
	inhibit-startup-echo-area-message t)

  (setq visible-bell 1
	ring-bell-function 'ignore)
#+end_src

*** Fonts

#+begin_src emacs-lisp
  (when (window-system)
    (set-frame-font "JetBrains Mono-13"))

  (if (and (eq system-type 'darwin) (version< "27.0" emacs-version))
      (set-fontset-font
       "fontset-default" 'unicode "Apple Color Emoji" nil 'prepend)
    (set-fontset-font
     t 'symbol (font-spec :family "Apple Color Emoji") nil 'prepend))
#+end_src

*** Theme

#+begin_src emacs-lisp
  (load-theme 'papercolor t)
#+end_src

** Eshell

#+begin_src emacs-lisp
  (if (featurep 'cl-lib)
      (require 'cl-lib)
    (require 'cl))

  (defun wuff-shortened-path (path max-len)
    "Return a modified version of PATH, replacing some components
  with single characters starting from the left to try and get the
  path down to MAX-LEN."
    (let* ((components (split-string (abbreviate-file-name path) "/"))
	   (len (+ (1- (length components))
		   (cl-reduce '+ components :key 'length)))
	   (str ""))
      (while (and (> len max-len)
		  (cdr components))
	(stq str (concat str (if (= 0 (length (car components)))
				 "/"
			       (string (elt (car components) 0) ?/)))
	     len (- len (1- (length (car components))))
	     components (cdr components)))
      (concat str (cl-reduce (lambda (a b) (concat a "/" b)) components))))

  (defun wuff-with-face (str &rest face-plist)
    "Propertize FACE-PLIST to STR."
    (propertize str 'face face-plist))

  (defun wuff-vc-prompt-info ()
    "String printed in eshell prompt for version control."
    (if (ignore-errors (vc-responsible-backend default-directory))
	(format "%s %s\n"
		(all-the-icons-octicon "git-branch" :height 0.8 :v-adjust 0.1)
		(wuff-with-face (magit-get-current-branch) `(:foreground "#b8bb26")))
      ""))

  (setq eshell-prompt-function
	(lambda ()
	  (format "\n%s[%s@%s %s]%s "
		  (wuff-vc-prompt-info)
		  (wuff-with-face user-login-name `(:foreground "#fabd2f"))
		  (wuff-with-face system-name `(:foreground "#cc241d"))
		  (wuff-with-face (wuff-shortened-path (eshell/pwd) 40) `(:foreground "#83a598"))
		  (if (= (user-uid) 0) "#" "$"))))

  (setq eshell-hist-ignoredups t
	eshell-highlight-prompt nil
	eshell-cmpl-cycle-completions nil
	eshell-cmpl-ignore-case t
	eshell-ask-to-save-history 'always
	eshell-prompt-regexp "^[^#$\n]*[#$] ")
#+end_src

** Swiper (and Ivy, Counsel)

#+begin_src emacs-lisp
  (mapc 'wuff-install-if-needed
	'(counsel
	  ivy
	  swiper))

  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t
	enable-recursive-minibuffers t)
  (global-set-key "\C-s" 'swiper)
  (global-set-key (kbd "C-c C-r") 'ivy-resume)
  (global-set-key (kbd "<f6>") 'ivy-resume)
  (global-set-key (kbd "M-x") 'counsel-M-x)
  (global-set-key (kbd "C-x C-f") 'counsel-find-file)
  (global-set-key (kbd "<f1> f") 'counsel-describe-function)
  (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
  (global-set-key (kbd "<f1> l") 'counsel-find-library)
  (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
  (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
  (global-set-key (kbd "C-c g") 'counsel-git)
  (global-set-key (kbd "C-c j") 'counsel-git-grep)
  (global-set-key (kbd "C-c k") 'counsel-ag)
  (global-set-key (kbd "C-x l") 'counsel-locate)
  (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
  (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)
#+end_src

** Magit

#+begin_src emacs-lisp
  (wuff-install-if-needed 'magit)
  (require 'magit)
#+end_src

** Projectile

#+begin_src emacs-lisp
  (mapc 'wuff-install-if-needed
	'(projectile
	  counsel-projectile))

  (projectile-mode +1)
  (counsel-projectile-mode)
  (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
  (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
#+end_src

** Rainbow delimiters

#+begin_src emacs-lisp
  (wuff-install-if-needed 'rainbow-delimiters)
  (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
#+end_src

** Rainbow mode

#+begin_src emacs-lisp
  (wuff-install-if-needed 'rainbow-mode)
  (add-hook 'prog-mode-hook #'rainbow-mode)
#+end_src

** Smex

#+begin_src emacs-lisp
  (wuff-install-if-needed 'smex)

  (require 'smex)
  (smex-initialize)
  (global-set-key (kbd "M-x") 'smex)
  (global-set-key (kbd "M-X") 'smex-major-mode-commands)
#+end_src

** Which-key

#+begin_src emacs-lisp
  (wuff-install-if-needed 'which-key)

  (require 'which-key)
  (setq which-key-add-column-padding 1
	which-key-idle-delay 0.5
	which-key-max-displays-columns nil
	which-key-min-displays-lines 5
	which-key-sort-order #'which-key-prefix-then-key-order
	which-key-sort-uppercase-first nil)
  (which-key-mode)
  (set-face-attribute 'which-key-local-map-description-face nil :weight 'bold)
  (which-key-setup-side-window-bottom)
#+end_src

* Development

** Utils

#+begin_src emacs-lisp
  (mapc 'wuff-install-if-needed
	'(flycheck
	  company
	  dap-mode
	  lsp-ivy
	  lsp-mode
	  lsp-treemacs
	  lsp-ui
	  company-lsp))

  (require 'lsp-mode)
  (require 'lsp-ui)
  (require 'company-lsp)

  (defun wuff-disable-flycheck-in-org-src-block ()
    (setq-local flycheck-disabled-checkers '(emacs-lisp-checkdoc)))

  (add-hook 'prog-mode-hook #'flycheck-mode)
  (add-hook 'org-src-mode-hook 'wuff-disable-flycheck-in-org-src-block)
  (add-hook 'prog-mode-hook #'company-mode)

  (setq company-tooltip-align-annotations t
	company-minimum-prefix-length 1)

  (push 'company-lsp company-backends)
#+end_src

** Bash

#+begin_src emacs-lisp
  (add-hook 'shell-mode-hook #'lsp-deferred)
#+end_src

** Plantuml

#+begin_src emacs-lisp
  (wuff-install-if-needed 'plantuml-mode)

  (setq plantuml-jar-path (expand-file-name "~/.local/bin/plantuml.1.2020.0.jar")
	plantuml-default-exec-mode 'jar)

  (add-to-list 'auto-mode-alist '("\\.uml\\'" . plantuml-mode))
#+end_src

** Rust

#+begin_src emacs-lisp
  (defvar cargo-path (expand-file-name ".cargo/bin" "~/"))
  (wuff-add-exec-path cargo-path)

  (mapc 'wuff-install-if-needed
	'(toml-mode
	  rust-mode
	  cargo
	  flycheck-rust))

  (add-hook 'rust-mode-hook #'lsp-deferred)
  (add-hook 'rust-mode-hook #'cargo-minor-mode)
  (add-hook 'flycheck-mode-hook #'flycheck-rust-setup)
#+end_src
* Org-mode

#+begin_src emacs-lisp
  (setq org-todo-keywords '((sequence "todo(t)" "started(s)" "waiting(w@/!)" "someday(.)"
				      "|"
				      "done(x!)" "cancelled(c@)")
			    (sequence "note(n)")))
#+end_src
