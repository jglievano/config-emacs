#+TITLE: My Emacs Configuration

* Initialization steps

** Package archives

#+begin_src emacs-lisp
  (require 'package)
  (setq package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
			   ("marmalade" . "https://jorgenschaefer.github.io/packages/")
			   ("melpa" . "https://melpa.org/packages/")
			   ("melpa-stable" . "https://stable.melpa.org/packages/")
			   ("org" . "https://orgmode.org/elpa/")))
  (package-initialize)
#+end_src

** Better settings

#+begin_src emacs-lisp
  (setq ad-redefinition-action 'accept
	auto-save-default nil
	create-lockfiles nil)
#+end_src

** Emacs local dir

#+begin_src emacs-lisp
  (let ((local-dir (expand-file-name ".local/" user-emacs-directory)))
    (setq abbrev-file-name (concat local-dir "abbrev.el")
	  auto-save-list-file-name (concat local-dir "autosave")
	  backup-directory-alist (list (cons "." (concat local-dir "backup/")))
	  pcache-directory (concat local-dir "pcache/")
	  server-auth-dir (concat local-dir "server/")))
#+end_src

* UI essentials

#+begin_src emacs-lisp
  ;; Needed to allow full-height screen.
  (setq frame-resize-pixelwise t)

  (column-number-mode)

  (if (fboundp 'fringe-mode) (fringe-mode -1))
  (if (fboundp 'tooltip-mode) (tooltip-mode -1))
  (if (fboundp 'menu-bar-mode) (menu-bar-mode -1))
  (if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
  (if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))

  (setq inhibit-splash-screen t
	inhibit-startup-message t
	inhibit-startup-echo-area-message t)

  (setq visible-bell 1
	ring-bell-function 'ignore)
#+end_src

** Fonts

#+begin_src emacs-lisp
  (when (window-system)
    (set-frame-font "JetBrains Mono-13"))

  (if (and (eq system-type 'darwin) (version< "27.0" emacs-version))
      (set-fontset-font
       "fontset-default" 'unicode "Apple Color Emoji" nil 'prepend)
    (set-fontset-font
     t 'symbol (font-spec :family "Apple Color Emoji") nil 'prepend))
#+end_src

** Theme

#+begin_src emacs-lisp
  (unless (package-installed-p 'dracula-theme)
    (package-install 'dracula-theme))
  (load-theme 'dracula t)
#+end_src

* Magit

#+begin_src emacs-lisp
  (unless (package-installed-p 'magit)
    (package-install 'magit))
  (require 'magit)
#+end_src

* Projectile

#+begin_src emacs-lisp
  (unless (package-installed-p 'projectile)
    (package-install 'projectile))
  (projectile-mode +1)
  (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
  (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
#+end_src

* Smex

#+begin_src emacs-lisp
  (unless (package-installed-p 'smex)
    (package-install 'smex))
  (require 'smex)
  (smex-initialize)
  (global-set-key (kbd "M-x") 'smex)
  (global-set-key (kbd "M-X") 'smex-major-mode-commands)
#+end_src

* Which-key

#+begin_src emacs-lisp
  (unless (package-installed-p 'which-key)
    (package-install 'which-key))
  (require 'which-key)
  (setq which-key-add-column-padding 1
	which-key-idle-delay 0.5
	which-key-max-displays-columns nil
	which-key-min-displays-lines 5
	which-key-sort-order #'which-key-prefix-then-key-order
	which-key-sort-uppercase-first nil)
  (which-key-mode)
  (set-face-attribute 'which-key-local-map-description-face nil :weight 'bold)
  (which-key-setup-side-window-bottom)
#+end_src
